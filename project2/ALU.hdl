// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not


CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // applying zx bit
    Mux16(a= x, b= false, sel= zx, out= zxc);
    //And16(a= m1, b= x, out= zxc);
    // applying nx bit
    Not16(in= zxc, out= notzxc);
    Mux16(a= zxc, b= notzxc, sel= nx, out= nzxc);
    // applying zy bit
    Mux16(a= y, b= false, sel= zy, out= zyc);
    // applying ny bit
    Not16(in= zyc, out= notzyc);
    Mux16(a= zyc, b= notzyc, sel= ny, out= nzyc);
    // applying f bit
    Add16(a = nzxc, b = nzyc, out = addnz);
    And16(a= nzxc, b= nzyc, out= andnz);
    Mux16(a= andnz, b= addnz, sel= f, out= fnzc);
    Not16(in= fnzc, out= notfnzc);

    // applying "no" bit and outputting: "out" and "ng" bits
    Mux16(a= fnzc, b= notfnzc, sel= no, out= res, out=out, out[15]=ng, out[15]=ngBit);
    
    // zr calculation and outputting

    // using 2's complement properties calculating opposite number
    Not16(in= res, out= notres);
    Inc16(in= notres, out[15]= oppositeToResLastBit);

    Not(in= ngBit, out= isResNonNeg);
    Not(in= oppositeToResLastBit, out= isOppositePositive);

    // if res is non-negative and opposite number is non negative,
    // than res==0
    And(a= isResNonNeg, b= isOppositePositive, out= zr);
}
