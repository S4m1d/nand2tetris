// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/PC.hdl
/**
 * A 16-bit counter.
 * if      reset(t): out(t+1) = 0
 * else if load(t):  out(t+1) = in(t)
 * else if inc(t):   out(t+1) = out(t) + 1
 * else              out(t+1) = out(t)
 */
CHIP PC {
    IN in[16], reset, load, inc;
    OUT out[16];
    
    PARTS:
    Not(in= reset, out= notReset);
    Not(in= load, out= notLoad);

    And(a= notLoad, b= notReset, out= notLoadAndNotReset);

    And(a= load, b= notReset, out= loadAndNotReset);
    And(a= inc, b= notLoadAndNotReset, out= incAfterPrioritization);

    Or(a= load, b= reset, out= loadOrReset);
    Or(a= inc, b= loadOrReset, out= isAnyCommand);
    
    Mux(a= true, b= incAfterPrioritization, sel= isAnyCommand, out= sndBit);
    Mux(a= true, b= loadAndNotReset, sel= isAnyCommand, out= fstBit);

    /*
    * This selection logic based on the following truth table:
    * 00 reset value
    * 01 load value from input
    * 10 increment current value
    * 11 leave value unchanged
    */
    Mux4Way16(a= false, b= in, c= inc16Out, d= regOut, sel[0]= fstBit, sel[1]=sndBit, out= valToSet);

    Inc16(in= regOut, out= inc16Out);
    Register(in= valToSet, load= true, out= out, out= regOut);
}
